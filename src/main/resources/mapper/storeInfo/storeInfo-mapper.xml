<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="storeInfo">
	<select id="selectStoreInfoList" resultMap="storeInfoMap">
	select A.*, 
		(select count(*) 
		from storeInfo 
		where categoryno = A.categoryno) categorycount 
	from storeInfo A 
	where categoryno = #{categoryno} 
	order by storegrade desc
	</select>
	<resultMap type="storeInfo" id="storeInfoMap"></resultMap>
	
	<select id="selectStoreInfoTotalContents" resultType="_int" >
		SELECT COUNT(*) FROM STOREINFO WHERE CATEGORYNO = #{categoryno}
	</select>
	
	<select id="getMyStore" resultType="storeInfo">
	select * from storeinfo where sellerId = #{sellerId}
	</select>
	
	<insert id="addStore">
		insert into storeinfo values(#{storeNo} , #{storeName}, #{storeTel} , #{storeAddress} , default , #{categoryNo} , #{storeIntro}, #{personalDay} , #{operatingHours} , default, default ,#{deliveryMinPrice} , #{sellerId} , default)
	</insert>
	
	<insert id="insertAttachment">
		insert into sattachment(attachmentno , storeno , originalfilename, renamedfilename, uploaddate , downloadcount, status )
		values (seq_sAttachmentno.nextval , #{storeNo} , #{originalFileName} , #{renamedFileName}, default, 0 ,default  )
	</insert>

	<select id="myStoreMenu" resultType="menu">
		select m.menuName, m.menuPrice
		from storeinfo s join menu m on s.storeNo = m.storeNo
		where s.sellerId = #{sellerId} and s.storeNo = #{storeNo}
    </select>

   <select id="menuList"  resultType="menu">
   	select * from menu where storeNo = #{storeNo}
   </select>
   
   <select id="storeInfoList"  resultType="storeInfo">
   	   select * from storeinfo where storeNo = #{storeNo}
   </select>
	
   <select id="menuCount"  resultType="_int">
   	  select count(*) from menu where storeNo = #{storeNo}
   </select>
 
   <select id="getAttachment" resultType="menuAttachment">
   	select * from menuAttachment where storeNo = #{storeNo}
   </select>
   
   <select id="selectMenuList" resultType="menu">
		select m.menuName, m.menuPrice, m.menuCode, m.storeNo, m.soldoutFlag
		from storeinfo s join menu m on s.storeNo = m.storeNo
		where s.storeNo = #{storeNo}
   </select>
   
   <select id="getthumbAttachment" resultType="menuAttachment">
       	select * from menuAttachment where storeNo = #{storeNo} and thumbFlag = 'Y'
   </select>
   
   <update id="oldThumbNail">
   		update menuAttachment set thumbFlag='N' where renamedfilename=#{nowThumb}
   </update>
   
   <update id="changeThmbNail">
   		update menuAttachment set thumbFlag='Y' where renamedfilename=#{newThumb}
   </update>
   
   <select id="selectOneMenu" resultType="menu">
   		select * from menu where menuCode = #{menuCode}
   </select>
   
   <update id="updateStoreInfo">
   		update storeInfo set storetel=#{storeTel},storeaddress = #{storeAddress}, operatinghours=#{operatingHours},personalday=#{personalday} where storeno=#{storeNo}
   </update>
   
   <select id="selectListStorInfo" resultType="storeInfo">
   		select * from storeinfo where sellerid = #{sellerId}
   </select>

   <update id="updateSoldout">
   		update menu set
   			<if test='soldoutFlag eq "N"'>soldoutFlag = 'Y'</if>
   			<if test='soldoutFlag eq "Y"'>soldoutFlag = 'N'</if>
   		where menuCode = #{menuCode}
   </update>

   <select id="orderList1" resultType="map">
		select m.address,m.phone,F.* from member m,(select I.memberid,I.storeno,I.deliveryFlag,I.cancelFlag,I.receiveFlag,I.priceway,I.totalprice,I.request,I.ordertime,Z.* from Orderinfo I,(select orderno,LISTAGG(list, '/') within group (order by orderno) name
		from(select orderno,menuname||' '||amount||'개' as list
		from(select O.orderno,O.storeno,O.amount,M.menuname from ordermenu O,menu M 
		where O.menucode=M.menucode)) group by orderno) Z
		where I.orderno=Z.orderno) F where m.memberid=F.memberid and storeno=#{storeNo} and receiveFlag='N' and cancelFlag='N'
   </select>
   
    <select id="orderList2" resultType="map">
		select m.address,m.phone,F.* from member m,(select I.memberid,I.storeno,I.deliveryFlag,I.receiveFlag,I.priceway,I.totalprice,I.request,I.ordertime,Z.* from Orderinfo I,(select orderno,LISTAGG(list, '/') within group (order by orderno) name
		from(select orderno,menuname||' '||amount||'개' as list
		from(select O.orderno,O.storeno,O.amount,M.menuname from ordermenu O,menu M 
		where O.menucode=M.menucode)) group by orderno) Z
		where I.orderno=Z.orderno) F where m.memberid=F.memberid and storeno=#{storeNo} and receiveFlag='Y' and deliveryFlag='N'
    </select>
    
    <select id="orderList3" resultType="map">
		select m.address,m.phone,F.* from member m,(select I.memberid,I.storeno,I.deliveryFlag,I.receiveFlag,I.priceway,I.totalprice,I.request,I.deliveryend,Z.* from Orderinfo I,(select orderno,LISTAGG(list, '/') within group (order by orderno) name
		from(select orderno,menuname||' '||amount||'개' as list
		from(select O.orderno,O.storeno,O.amount,M.menuname from ordermenu O,menu M 
		where O.menucode=M.menucode)) group by orderno) Z
		where I.orderno=Z.orderno) F where m.memberid=F.memberid and storeno=#{storeNo} and receiveFlag='Y' and deliveryFlag='Y'
   </select>
   
   <update id="receiveOrder">
       update orderinfo set receiveFlag='Y',deliverytime=#{howLongChecked} where orderno=#{orderNo}
   </update>

	<select id="adSelectAll" resultType="ad">
		select * from ad where storeNo = #{storeNo } order by adNo desc
	</select>
	<select id="adSelectNow" resultType="ad">
		<![CDATA[ select * from ad where storeNo = #{storeNo } and enddate >= sysdate order by adNo desc]]>
	</select>
	<select id="adSelectPast" resultType="ad">
		<![CDATA[ select * from ad where storeNo = #{storeNo } and enddate < sysdate order by adNo desc]]>
	</select>
	
	<select id="countAdAll" resultType="_int">
		 select count(*) as cnt from ad where storeNo = #{storeNo }
	</select>
	
	<select id="countAdNow" resultType="_int">
		<![CDATA[ select count(*) as cnt from ad where storeNo = #{storeNo } and enddate >= sysdate order by adNo desc]]>
	</select>
	
	<select id="countAdPast" resultType="_int">
		 <![CDATA[ select count(*) as cnt from ad where storeNo = #{storeNo } and enddate < sysdate order by adNo desc]]>
	</select>

	<insert id="adRequest" parameterType="ad">
		 <![CDATA[ insert into ad values(seq_ad_adno.nextval, #{storeNo}, #{price}, #{storeGrade},sysdate,add_months(sysdate,+1))]]>
	</insert>

	<update id="deliveryEnd">
	   update orderinfo set deliveryFlag='Y',deliveryEnd=sysdate where orderno=#{orderNo}
	</update>

	<select id="selectOnebyStoreNo" resultType="storeInfo">
		select * from storeinfo where storeno = #{storeNo}
	</select>
	
	<select id="selectAttchMentLsit" resultType="SAttachment">
		select * from sattachment where storeno = #{storeNo} and status = 'N'
	</select>
	
	<update id="deleteFile1">
		update sattachment set status = 'Y' where originalfilename = #{filename}
	</update>
	
	<select id="cancelOrder">
	    update orderinfo set cancelFlag='Y' where orderno=#{orderNo}
	</select>

	<update id="updateStore" >
		update storeinfo set storeTel = #{storeTel} , storename=#{storeName} ,storeAddress = #{storeAddress} , categoryNo = #{categoryNo} , storeintro = #{storeIntro} , personalday = #{personalDay} , operatinghours = #{operatingHours}  , deliveryMinPrice =#{deliveryMinPrice} where storeNo = #{storeNo}
	</update>
	
	<update id="closedStore">
		update storeinfo set closeflag =  'Y' where storeNo = #{storeNo}
	</update>


	<!-- 종합 보기에서 저번주의 판매량을 가지고 오는 쿼리문 -->
	<select id="totalSaleVolumeofWeek" resultMap="totalOf">
		select to_char(ordertime,'dy')as orderday,sum(O.totalprice)as totalprice,S1.storename ,sum(O.originalprice)as originalprice, S1.sellerid, O.storeno
		from orderinfo O left join storeinfo S1 on O.storeno = S1.storeno join seller S2 on S1.sellerid = S2.sellerid
		where S1.sellerid = #{sellerId} and O.cancelflag = 'N' and ((TRUNC(sysdate, 'iw')-7)- O.ordertime <![CDATA[<=]]> 0) and (TRUNC(sysdate, 'iw') - O.ordertime >= 0)
		group by to_char(ordertime,'dy'),  S1.storename, O.storeno,S1.sellerid
	</select>
	<select id="totalSaleVolumeofToday" resultMap="totalOf">
		select to_char(ordertime,'hh24')as orderday,sum(O.totalprice)as totalprice,S1.storename ,sum(O.originalprice)as originalprice, S1.sellerid, O.storeno
		from orderinfo O left join storeinfo S1 on O.storeno = S1.storeno join seller S2 on S1.sellerid = S2.sellerid
		where S1.sellerid = #{sellerId} and O.cancelflag = 'N' and (TRUNC(sysdate)- O.ordertime <![CDATA[<=]]> 0) and (TRUNC(sysdate)+1 - O.ordertime >= 0)
		group by to_char(ordertime,'hh24'), S1.storename, O.storeno,S1.sellerid
	</select>
	<select id="totalSaleVolumeofMonth" resultMap="totalOf">
		select to_char(ordertime,'MM/dd')as orderday,sum(O.totalprice)as totalprice,S1.storename ,sum(O.originalprice)as originalprice, S1.sellerid, O.storeno
		from orderinfo O left join storeinfo S1 on O.storeno = S1.storeno join seller S2 on S1.sellerid = S2.sellerid
		where S1.sellerid = #{sellerId} and O.cancelflag = 'N' and extract(month from sysdate)-extract(month from ordertime)=1 
		group by to_char(ordertime,'MM/dd'), S1.storename, O.storeno,S1.sellerid
	</select>
	<select id="totalSaleVolumeof3Month" resultMap="totalOf">
	select to_char(ordertime,'MM')as orderday,sum(O.totalprice)as totalprice,S1.storename ,sum(O.originalprice)as originalprice, S1.sellerid, O.storeno
	from orderinfo O left join storeinfo S1 on O.storeno = S1.storeno join seller S2 on S1.sellerid = S2.sellerid
	where S1.sellerid = #{sellerId} and O.cancelflag = 'N' and extract(month from sysdate)-extract(month from ordertime) >= 1 and  extract(month from sysdate)-extract(month from ordertime) <![CDATA[<=]]> 3
	group by to_char(ordertime,'MM'), S1.storename, O.storeno,S1.sellerid
	</select>
	<resultMap type="map" id="totalOf">
		<result column="originalprice" property="ORIGINALPRICE" javaType="string"/>
		<result column="totalprice" property="TOTALPRICE" javaType="string"/>
	</resultMap>
</mapper>
